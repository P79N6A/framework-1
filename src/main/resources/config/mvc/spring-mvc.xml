<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"
	default-lazy-init="true">
	<mvc:annotation-driven />
	<mvc:cors>
		<mvc:mapping path="/**" allowed-origins="*"
			allow-credentials="true" max-age="1800" allowed-methods="GET,POST,OPTIONS" />
	</mvc:cors>
	<context:property-placeholder
		ignore-unresolvable="true" location="classpath*:/config/web.properties" />
	<context:component-scan
		base-package="com.ss.code.controller,com.ss.user.controller" />

	<mvc:annotation-driven
		content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<!-- <bean -->
			<!-- class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"> -->
			<!-- <property name="supportedMediaTypes"> -->
			<!-- <list> -->
			<!-- <value>application/json;charset=UTF-8</value> -->
			<!-- </list> -->
			<!-- </property> -->
			<!-- <property name="prettyPrint" value="false" /> -->
			<!-- <property name="objectMapper"> -->
			<!-- <bean class="com.framework.mapper.JsonMapper"></bean> -->
			<!-- </property> -->
			<!-- </bean> -->
			<!-- =======================fastjson alibaba=========================== -->
			<bean
				class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html;charset=UTF-8</value>
						<value>application/json;charset=UTF-8</value>
					</list>
				</property>
				<property name="features">
					<array>
						<value>WriteMapNullValue</value>
						<value>WriteNullStringAsEmpty</value>
					</array>
				</property>
			</bean>
			<!-- 使用XML格式输出数据 -->
			<bean
				class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
				<constructor-arg>
					<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
						<property name="streamDriver">
							<bean class="com.thoughtworks.xstream.io.xml.StaxDriver" />
						</property>
						<property name="annotatedClasses">
							<list>
								<!-- 需要添加 -->
							</list>
						</property>
					</bean>
				</constructor-arg>
				<property name="supportedMediaTypes" value="application/xml"></property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager"
		class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<map>
				<entry key="xml" value="application/xml" />
				<entry key="json" value="application/json" />
			</map>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
		<property name="favorPathExtension" value="true" />
	</bean>


	<!-- 国际化配置 -->
	<!-- <bean id="messageSource" -->
	<!-- class="org.springframework.context.support.ResourceBundleMessageSource"> -->
	<!-- <property name="basename" value="i18n.ApplicationResources" /> -->
	<!-- </bean> -->
	<!-- <bean -->
	<!-- class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" 
		/> -->
	<!-- <bean -->
	<!-- class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"> -->
	<!-- <property name="messageConverters"> -->
	<!-- <list> -->
	<!-- <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/> -->
	<!-- </list> -->
	<!-- </property> -->
	<!-- </bean> -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}" />
		<property name="suffix" value="${web.view.suffix}" />
		<!-- <property name="contentType" value="text/html;charset=UTF-8" /> -->
	</bean>

	<!-- fastjson-1.1.41与SpringMVC整合 -->
	<!-- 1)若按照jackson和SpringMVC的整合方式,应按照下面的写法,但测试发现这样会报告"HTTP Status 406" The 
		resource identified by this request is only capable of generating responses 
		with characteristics not acceptable according to the request "accept" headers. 
		2)测试通过的整合方式为上面那样在mvc:annotation-driven里面进行注册 3)supportedMediaTypes增加[text/html;charset=UTF-8]值,是为了兼容IE6 
		否则[application/json]值在IE6中会导致弹出对话框询问是否保存文件,而firefox等高级浏览器会正常打印json字符串 4)若像下面这样给supportedMediaTypes属性赋两个值[text/html;charset=UTF-8]和[application/json],则[application/json]是无效的 
		因为此时应答给浏览器(或者说请求方)的Content-Type头信息都是[text/html;charset=UTF-8],所以给它一个值就行了 
		如果给supportedMediaTypes的值为[application/json],则应答给浏览器的Content-Type头信息就是[application/json;charset=UTF-8] 
		5)关于features属性,不是serializerFeature,而是features,详见FastJsonHttpMessageConverter.java 
		它是用来控制json序列化输出时的一些额外属性,比如说该字段是否输出、输出时key使用单引号还是双引号、key不使用任何引号等等 QuoteFieldNames 
		输出key时是否使用双引号,默认为true WriteMapNullValue 是否输出值为null的字段,默认为false WriteNullNumberAsZero 
		数值字段如果为null,输出为0,而非null WriteNullListAsEmpty List字段如果为null,输出为[],而非null WriteNullStringAsEmpty 
		字符类型字段如果为null,输出为"",而非null WriteNullBooleanAsFalseBoolean字段如果为null,输出为false,而非null 
		6)通常在网上搜到的fastjson和springMVC整合的例子中都像下面注释的代码那样给了两个属性WriteMapNullValue和QuoteFieldNames 
		这就表示为json解析器设置QuoteFieldNames和WriteMapNullValue的值为true,即输出时key使用双引号,同时也输出值为null的字段 
		7)输出时某字段为String类型,且值为null,此时若需要其输出,且输出值为空字符串,则需同时赋值WriteMapNullValue和WriteNullStringAsEmpty 
		经测试,若只赋值WriteNullStringAsEmpty,则不会输出该字段..加上WriteMapNullValue属性后,便输出了,且输出值不是null,而是预期的空字符串 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"> 
		<property name="supportedMediaTypes"> <list> <value>text/html;charset=UTF-8</value> 
		<value>application/json</value> </list> </property> <property name="serializerFeature"> 
		<array> <value>QuoteFieldNames</value> <value>WriteMapNullValue</value> </array> 
		</property> </bean> </list> </property> </bean> -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"> 
		<property name="messageConverters"> <list> <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"> 
		<property name="supportedMediaTypes" value="text/html;charset=UTF-8"/> </bean> 
		</list> </property> </bean> -->


</beans>
